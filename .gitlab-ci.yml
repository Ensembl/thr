# GitLab Dependency Proxy to get rid of Docker hub pull limit issue
# https://docs.gitlab.com/ee/user/packages/dependency_proxy/#authenticate-within-cicd
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.7

# GitLab CI uses the services keyword to define what docker containers should be linked with our base image.
# Since we are using docker as our image we'll be using docker:dind i.e. Docker-In-Docker-Image
services:
  - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:dind

variables:
  # This fixes "error during connect: Post http://docker:2375/v1.40/auth: dial tcp: lookup docker on 192.168.65.5:53: no such host"
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  # See https://github.com/docker-library/docker/pull/166
  DOCKER_TLS_CERTDIR: ""


stages:
  - test
  - build


# Test

pylint:
  stage: test
  # This job doesn't depend on the others
  needs: []
  before_script:
    # Installing mysql and requirements
    - pip install -r requirements.txt
  script:
    - python -V
    - pylint $(git ls-files '*.py') --django-settings-module=thr.settings --fail-under=9


# I disabled pytest job for now till I figure out why it gets
# stuck until it times out on GitLab CI  but running fine locally
.pytest:
  stage: test
  before_script:
    # Installing mysql and requirements
    - apt-get update && apt-get install -y git curl libmcrypt-dev default-mysql-client
    - mysql --version
    - echo "Sleeping for 20 seconds.."; sleep 20;
    - pip install -r requirements.txt
    # Executing makemigrations and migrate
    - python manage.py makemigrations
    - python manage.py migrate
    - curl http://elasticsearch:9200
    # Delete the indices and then recreate and populate them
    - python manage.py search_index --rebuild -f
    - curl -X GET "elasticsearch:9200/_cat/indices"

  variables:
    # Configure mysql service (https://hub.docker.com/_/mysql/)
    MYSQL_HOST: "mysql"
    MYSQL_DATABASE: "thr_db"
    MYSQL_USER: "thr_dev"
    MYSQL_PASSWORD: "password"
    MYSQL_ROOT_PASSWORD: "password"
    # Configure Elascticsearch
    ELASTICSEARCH_URL: "http://elasticsearch:9200"

  services:
    - name: mysql:5.7
      alias: mysql

    - name: docker.elastic.co/elasticsearch/elasticsearch:6.3.0
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

  script:
    - python -V
    # Command to test our application
    - pytest -vvv


# Build

build:
  image: docker:19.03.12
  stage: build
#  needs: ["pytest"]
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - echo $CI_REGISTRY_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

# Useful resources:
# https://docs.gitlab.com/ee/user/packages/container_registry/
# https://www.agiliq.com/blog/2018/07/ci-and-cd-for-django-using-gitlab-ci/